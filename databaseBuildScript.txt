
DROP DATABASE IF EXISTS `electronic_gradebook`;
CREATE DATABASE `electronic_gradebook` COLLATE 'utf8_unicode_ci';

USE `electronic_gradebook`;

CREATE TABLE address(
	ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	postal_code CHAR(6) NOT NULL CHECK(postal_code REGEXP '^[0-9]{2}-[0-9]{3}'),
	city VARCHAR(30) NOT NULL CHECK(city REGEXP '^[-A-Za-zÍÛπú≥øüÊ ”•å£Øè∆ ]+$'),
	street VARCHAR(30) NOT NULL CHECK(street REGEXP '^[-1-9A-Za-zÍÛπú≥øüÊ ”•å£Øè∆ ]+$'),
	house_number INT NOT NULL,
	flat_number INT NULL
);

CREATE TABLE users(
	-- ID jest generowany automatycznie przy wprowadzaniu nowego uøytkownika. 3 pierwsze litery imienia, potem 3 pierwsze nazwiska, potem 5 losowych cyfr.
	ID CHAR(11) NOT NULL UNIQUE PRIMARY KEY CHECK(ID REGEXP '^[a-zA-ZÍÛπú≥øüÊ ”•å£Øè∆]{6}[0-9]{5}$'),
	PESEL CHAR(11) NOT NULL UNIQUE CHECK(PESEL REGEXP '^[0-9]{11}$'),
	-- TODO kontrola, øeby PESEL by≥ zgodny z datπ urodzenia
	password_hash BINARY(64) NOT NULL,
	first_name VARCHAR(20) NOT NULL CHECK(first_name REGEXP '^[A-Za-zÍÛπú≥øüÊ ”•å£Øè∆]+$'),
	second_name VARCHAR(20) CHECK(second_name REGEXP '^[A-Za-zÍÛπú≥øüÊ ”•å£Øè∆]+$'),
	surname VARCHAR(20) NOT NULL CHECK(surname REGEXP '^[- A-Za-zÍÛπú≥øüÊ ”•å£Øè∆]+$'),
	date_of_birth DATE NOT NULL,
	address_id INT NOT NULL REFERENCES address(`ID`) ON DELETE RESTRICT,
	-- jeszcze sπ sytuacje øe moøna uøywaÊ kropek w loginie w mailu, ale to skomplikowane
	email VARCHAR(50) CHECK(email REGEXP '^[-!#$%&*+/=?^_`{|}~a-zA-Z0-9]+@([a-zA-Z]([-0-9a-zA-Z]*[a-zA-Z])?)(\.[a-zA-Z]([-0-9a-zA-Z]*[a-zA-Z])?)+$'),
	contact_phone CHAR(12) CHECK(contact_phone REGEXP '[+][0-9]{11}'),
	permissions ENUM('ADMIN', 'TEACHER', 'STUDENT') NOT NULL
);

CREATE TABLE staff(
	ID CHAR(11)	NOT NULL REFERENCES users(ID)
);

CREATE TABLE classes(
	ID CHAR(2) PRIMARY KEY CHECK(ID REGEXP '^[1-8][a-z]$'),
	tutor CHAR(11) NOT NULL REFERENCES staff(ID),
	class_year INT NOT NULL DEFAULT 1 CHECK(class_year BETWEEN 1 AND 8)
);

CREATE TABLE students(
	ID CHAR(11) NOT NULL REFERENCES users(ID),
	parent_phone CHAR(12) CHECK(parent_phone REGEXP '^[+][0-9]{11}$'),
	class_id CHAR(2) NOT NULL REFERENCES classes(ID)
);

CREATE TABLE subjects(
	ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) NOT NULL,
	class_year INT NOT NULL CHECK(class_year BETWEEN 1 AND 8)
);
	

CREATE TABLE grades(
	ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	assessment_date DATE NOT NULL DEFAULT NOW(),
	grade_value INT NOT NULL CHECK(grade_value BETWEEN 1 AND 6),
	student_id CHAR(11) NOT NULL REFERENCES students(ID),
	teacher_id CHAR(11) NOT NULL REFERENCES staff(ID),
	subject_id INT NOT NULL REFERENCES subjects(ID),
	final_grade BOOL NOT NULL DEFAULT FALSE,
	note VARCHAR(100)
);

CREATE TABLE lesson_sets(
	ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	subject_id INT NOT NULL REFERENCES subjects(ID),
	teacher_id CHAR(11) NOT NULL REFERENCES staff(ID),
	class_id CHAR(2) NOT NULL REFERENCES classes(ID)
);

CREATE TABLE lesson_hours(
	ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	lesson_set_id INT NOT NULL REFERENCES lesson_sets(ID),
	room_number VARCHAR(8) NOT NULL,
	week_day ENUM('MON','TUE','WED','THU','FRI') NOT NULL,
	start_hour TIME NOT NULL,
	end_hour TIME NOT NULL CHECK(TIMEDIFF(end_hour,start_hour) > 0)
);

DELIMITER $$

CREATE OR REPLACE FUNCTION getAddressIdCreateIfNecessary (postal_code CHAR(6), city VARCHAR(30), street VARCHAR(30), house_number INT, flat_number INT) RETURNS INT
	BEGIN
		IF(flat_number IS NULL) THEN
			IF NOT EXISTS(SELECT * FROM address a WHERE a.postal_code LIKE postal_code AND a.city LIKE city AND a.street LIKE street AND a.house_number LIKE house_number
					AND a.flat_number IS NULL) THEN
				INSERT INTO address(postal_code,city,street,house_number) VALUES(postal_code,city,street,house_number);
			END IF;
				RETURN(SELECT a.ID FROM address a WHERE a.postal_code LIKE postal_code AND a.city LIKE city AND a.street LIKE street AND a.house_number LIKE house_number
					AND a.flat_number IS NULL ORDER BY a.ID ASC LIMIT 1);
		ELSE
			IF NOT EXISTS(SELECT * FROM address a WHERE a.postal_code LIKE postal_code AND a.city LIKE city AND a.street LIKE street AND a.house_number LIKE house_number
				AND a.flat_number LIKE flat_number) THEN
				INSERT INTO address(postal_code,city,street,house_number,flat_number) VALUES(postal_code,city,street,house_number,flat_number);
			END IF;
			RETURN(SELECT a.ID FROM address a WHERE a.postal_code LIKE postal_code AND a.city LIKE city AND a.street LIKE street AND a.house_number LIKE house_number
				AND a.flat_number LIKE flat_number ORDER BY a.ID ASC LIMIT 1);
		END IF;
	END;
$$

CREATE OR REPLACE FUNCTION addNewUser (PESEL CHAR(11), passwd VARCHAR(64), first_name VARCHAR(20), second_name VARCHAR(20), surname VARCHAR(20), date_of_birth DATE, address_id INT,
	email VARCHAR(50), contact_phone CHAR(12), permission ENUM('ADMIN','TEACHER','STUDENT')) RETURNS CHAR(11)
	BEGIN
		DECLARE hashPasswd BINARY(64) DEFAULT SHA2(passwd,256);
		DECLARE idSuffix CHAR(5) DEFAULT TRUNCATE(RAND()*100000,0);
		DECLARE genID CHAR(11) DEFAULT CONCAT(SUBSTRING(first_name,1,3),SUBSTRING(surname,1,3),idSuffix);
		WHILE(genID IN (SELECT ID FROM users)) DO
			SET idSuffix = TRUNCATE(RAND()*100000,0);
			SET genID = CONCAT(SUBSTRING(first_name,1,3),SUBSTRING(surname,1,3),idSuffix);
		END WHILE;
		INSERT INTO users(ID,PESEL,password_hash,first_name,second_name,surname,date_of_birth,address_id,email,contact_phone,permissions)
		VALUES(genID,PESEL,hashPasswd,first_name,second_name,surname,date_of_birth,address_id,email,contact_phone,permission);
		RETURN genID;
	END;
$$

CREATE OR REPLACE PROCEDURE addStudent (IN PESEL CHAR(11), passwd VARCHAR(64), first_name VARCHAR(20), second_name VARCHAR(20), surname VARCHAR(20), date_of_birth DATE,
	email VARCHAR(50), contact_phone CHAR(12), postal_code CHAR(6), city VARCHAR(30), street VARCHAR(30), house_number INT, flat_number INT, parent_phone CHAR(12), class_id CHAR(2))
	BEGIN
		DECLARE address_id INT;
		DECLARE user_id CHAR(11);
		IF(class_id IN (SELECT ID FROM classes)) THEN
			SET address_id = getAddressIdCreateIfNecessary(postal_code, city, street, house_number, flat_number);
			SET user_id = addNewUser(PESEL, passwd, first_name, second_name, surname, date_of_birth, address_id, email, contact_phone, 'STUDENT');
			INSERT INTO students VALUES(user_id,parent_phone,class_id);
			SELECT user_id;
		END IF;
	END;
$$

CREATE OR REPLACE PROCEDURE addAdmin (IN PESEL CHAR(11), passwd VARCHAR(64), first_name VARCHAR(20), second_name VARCHAR(20), surname VARCHAR(20), date_of_birth DATE,
	email VARCHAR(50), contact_phone CHAR(12), postal_code CHAR(6), city VARCHAR(30), street VARCHAR(30), house_number INT, flat_number INT)
	BEGIN
		DECLARE address_id INT DEFAULT getAddressIdCreateIfNecessary(postal_code, city, street, house_number, flat_number);
		DECLARE user_id CHAR(11) DEFAULT addNewUser(PESEL, passwd, first_name, second_name, surname, date_of_birth, address_id, email, contact_phone, 'ADMIN');
		INSERT INTO staff VALUES(user_id);
		SELECT user_id;
	END;
$$

CREATE OR REPLACE PROCEDURE addStaff (IN PESEL CHAR(11), passwd VARCHAR(64), first_name VARCHAR(20), second_name VARCHAR(20), surname VARCHAR(20), date_of_birth DATE,
	email VARCHAR(50), contact_phone CHAR(12), postal_code CHAR(6), city VARCHAR(30), street VARCHAR(30), house_number INT, flat_number INT)
	BEGIN
		DECLARE address_id INT DEFAULT getAddressIdCreateIfNecessary(postal_code, city, street, house_number, flat_number);
		DECLARE user_id CHAR(11) DEFAULT addNewUser(PESEL, passwd, first_name, second_name, surname, date_of_birth, address_id, email, contact_phone, 'TEACHER');
		INSERT INTO staff VALUES(user_id);
		SELECT user_id;
	END;
$$

CREATE OR REPLACE PROCEDURE login (IN username CHAR(11), passwd VARCHAR(64))
	BEGIN
		DECLARE hash_password BINARY(64) DEFAULT SHA2(passwd,256);
		IF(username REGEXP '[0-9]{11}') THEN
			IF EXISTS(SELECT u.ID FROM users u WHERE u.PESEL LIKE username AND u.password_hash = hash_password) THEN
				SELECT u.ID, u.permissions FROM users u WHERE u.PESEL LIKE username AND u.password_hash = hash_password LIMIT 1;
			END IF;
		ELSEIF(username REGEXP '[a-zA-ZÍÛπú≥øüÊ ”•å£Øè∆]{6}[0-9]{5}') THEN
			IF EXISTS(SELECT u.ID FROM users u WHERE u.ID LIKE username AND u.password_hash = hash_password) THEN
				SELECT u.ID, u.permissions FROM users u WHERE u.ID LIKE username AND u.password_hash = hash_password LIMIT 1;
			END IF;
		END IF;
	END;
$$

CREATE OR REPLACE PROCEDURE addGrade (IN grade_value INT, student_id CHAR(11), teacher_id CHAR(11), subject_id INT, final_grade BOOL, note VARCHAR(100))
	BEGIN
		IF NOT EXISTS(SELECT * FROM grades g WHERE g.student_id LIKE student_id AND g.subject_id LIKE subject_id AND final_grade = TRUE) THEN
			INSERT INTO grades(grade_value,student_id,teacher_id,subject_id,final_grade,note) VALUES(grade_value,student_id,teacher_id,subject_id,final_grade,note);
			SELECT grade_value;
		END IF;
	END;
$$

CREATE OR REPLACE PROCEDURE addGrade (IN grade_value INT, student_id CHAR(11), teacher_id CHAR(11), subject_id INT, final_grade INT, note VARCHAR(100))
	BEGIN
		DECLARE final_grade_bool BOOL;
		IF(final_grade = 1) THEN
			SET final_grade_bool = TRUE;
		ELSEIF(final_grade = 0) THEN
			SET final_grade_bool = FALSE;
		END IF;
		IF NOT EXISTS(SELECT * FROM grades g WHERE g.student_id LIKE student_id AND g.subject_id LIKE subject_id AND final_grade = TRUE) THEN
			INSERT INTO grades(grade_value,student_id,teacher_id,subject_id,final_grade,note) VALUES(grade_value,student_id,teacher_id,subject_id,final_grade_bool,note);
			SELECT grade_value;
		END IF;
	END;
$$

CREATE OR REPLACE PROCEDURE addSubject (IN name VARCHAR(50), class_year INT)
	BEGIN
		IF NOT EXISTS (SELECT * FROM subjects s WHERE s.name LIKE name AND s.class_year = class_year) THEN
			INSERT INTO subjects(name,class_year) VALUES(name,class_year);
			SELECT s.ID FROM subjects s WHERE s.name LIKE name AND s.class_year = class_year;
		END IF;
	END;
$$

CREATE OR REPLACE PROCEDURE addClass (IN class_id CHAR(2), tutor CHAR(11), class_year INT)
	BEGIN
		INSERT INTO classes(ID,tutor,class_year) VALUES(class_id,tutor,class_year);
		SELECT class_id;
	END
$$

CREATE OR REPLACE PROCEDURE addLessonSet (IN subject_id INT,teacher_id CHAR(11),class_id CHAR(2))
	BEGIN
		INSERT INTO lesson_sets(subject_id,teacher_id,class_id) VALUES(subject_id,teacher_id,class_id);
		SELECT l.ID FROM lesson_sets l WHERE l.subject_id = subject_id AND l.teacher_id LIKE teacher_id AND l.class_id LIKE class_id;
	END;
$$

CREATE OR REPLACE PROCEDURE addLessonHour (IN lesson_set_id INT, room_number VARCHAR(8), week_day ENUM('MON','TUE','WED','THU','FRI'), start_hour TIME, end_hour TIME)
	BEGIN
		INSERT INTO lesson_hours(lesson_set_id,room_number,week_day,start_hour,end_hour) VALUES(lesson_set_id,room_number,week_day,start_hour,end_hour);
		SELECT 'SUCCESS';
	END;
$$

CREATE OR REPLACE PROCEDURE listAllClasses()
	BEGIN
		SELECT c.ID, c.class_year FROM classes c;
	END;
$$

CREATE OR REPLACE PROCEDURE listAllSubjectsForClass(IN class_id CHAR(2))
	BEGIN
		SELECT DISTINCT s.ID, s.name, s.class_year FROM lesson_sets l INNER JOIN subjects s ON l.subject_id = s.ID WHERE l.class_id LIKE class_id;
	END;
$$

CREATE OR REPLACE PROCEDURE listAllSubjectsForYear(IN class_year INT)
	BEGIN
		SELECT s.ID,s.name, s.class_year FROM subjects s WHERE s.class_year = class_year;
	END;
$$

CREATE OR REPLACE PROCEDURE listAllStudentsForClass(IN class_id CHAR(2))
	BEGIN
		SELECT u.ID,u.first_name,u.surname,u.email,u.contact_phone,s.parent_phone FROM students s INNER JOIN users u ON s.ID LIKE u.ID WHERE s.class_id LIKE class_id;
	END;
$$

CREATE OR REPLACE PROCEDURE listStudentsGradesForSubject(IN student_id CHAR(11), subject_id INT)
	BEGIN
		SELECT g.assessment_date,g.grade_value,g.final_grade,u.surname,g.note FROM grades g INNER JOIN users u ON g.teacher_id LIKE u.ID WHERE g.student_id LIKE student_id AND g.subject_id = subject_id;
	END;
$$

DELIMITER ;

CALL addAdmin('11111111111','admin','Admin','Admin','Admin','1111-11-11','admin@admin.com','+11111111111','11-111','Admin','Admin',1,1);